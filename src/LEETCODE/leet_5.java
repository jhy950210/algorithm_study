package src.LEETCODE;

public class leet_5 {

    public static void main(String[] args) {
        String s
        System.out.println(longestPalindrome(s));
    }

    public static String longestPalindrome(String s) {
        if(s.length() < 2) return s;
        String result = String.valueOf(s.charAt(0));

        for(int start=0; start<s.length()-1; start++){
            for(int end=start+1; end<s.length(); end++){
                int checkLength = ((end - start) + 1)/ 2;
                int startWindow = start;
                int endWindow = end;
                int match = 0;

                while(s.charAt(startWindow) == s.charAt(endWindow) && startWindow < endWindow){
                    startWindow++;
                    endWindow--;

                    match++;
                }

                if(match == checkLength && (end - start) + 1 > result.length()){
                    result = s.substring(start, end+1);
                }
            }
        }

        return result;
    }

}


